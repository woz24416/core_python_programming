# coding=utf-8

#python使用 \ 来进行跨行，一下2种情况例外：
	#1，在闭合操作符下，例如() [] {}
	#2，在三引号包括下，例如：''' ''' 或者  “”“  ”“”

#避免使用制表符，以便于多平台移植

#每个python文件都是一个模块，以磁盘文件的形式存在

'''
在python中赋值就是对象的引用。在赋值时，不管这个对象是新创建的还是一个已经存在的，都是该对象的引用
'''

#增量赋值操作符，例如+= -+ *= /=等等，对于第一个对象的影响变化最大，如果是可变对象就会被修改；如果是不可变对象的话会被分配一个新的对象

#多重赋值：该对象的同一个引用被赋值给多个对象，例如： x=y=z=1

#多元赋值：将多个对象赋给多个变量，此时，等号两边的对象都是元组，例如：x, y, z = 1, 2, 'abc'

#避免使用下划线开头作为变量名称

#模块导入：函数内部的模块导入代码不会被执行，除非该函数正在执行

#在模块顶层定义的变量为全局变量，在模块中的所有函数都可以直接使用，但应该尽量避免，以局部变量来代替从而提高性能并节省内存

#主程序：无论这个模块是被别的模块导入还是作为脚本直接执行，都会这行这部分代码。这部分通常是最高级别的python语句，也就是没有缩进的代码行

#通常只有主程序模块中有大量的顶级可执行代码，所有其他被导入的模块只应该有很少的顶级执行代码，所有的功能代码都应该封装在函数或者类中

#很多项目都是一个主程序，由它导入所有需要的模块。绝大部分的模块创建的目的就是为了被别人调用而不是作为独立执行的脚本

'''
__name__指示模块应该如何被加载
由于主程序无论是被导入还是直接执行都会运行，因此需要检测该模块是被导入还是被直接执行，__name__ 系统变量判断条件：
如果模块是被导入的，__name__的值就是模块的名字
如果模块是被直接执行的，__name__的值就是'__main__'
'''

'''
测试代码仅当该文件被直接执行时运行，也就是说，不是在被别的模块导入时。
利用__name__变量，将测试代码放在一个叫做main的函数中，如果模块是直接运行的，就调用这个函数
在主程序中放置测试代码是测试模块的简单快捷的手段
'''

#python标准库中还提供unittest模块，当需要对一个大系统进行正规系统的回归测试时，会派上用场

#内存分配：python内部记录着所有使用中的对象各有多少引用。当对象被创建时，就创建了一个引用计数；当这个对象的引用计数变为0时，它就会被垃圾回收

'''
当同一个对象又被赋值给其他变量时，或作为参数传递给函数、方法或类实例时，或者被赋值为一个窗口对象的成员时，则该对象的引用计数自动加1，参加下例：
# 对象被创建   x = 3.14
# 被别名创建   y = x
＃ 作为参数传递给函数  foobar(x)
# 成为容器对象的一个元素   myList = [1, 'abc', x]
'''

#python解释器跟踪对象的引用计数器，垃圾收集器负责释放内存，它用来寻找引用计数为0的的对象

'''
使用局部变量替换模块变量，这个查找的速度会快的多
'''

# os.path.exists()  检测文件是否存在 存在返回True，否则返回False

'''
try子句是一段我们希望监测错误的代码，except子句是我们处理错误的地方
异常处理最适用的场合，是在没有合适的函数处理异常状况的时候
'''